f <- boring_function(x)
submit()
boring_function <- function(x) {
x
}
boring_function <- function(x) {
a <- x
a}
submit()
boring_function <- function(x) {
f <- x
f}
submit()
boring_function <- function(x) {
x = x
x}
> submit()
boring_function <- function(x) {
+     f <- x
+ f}submit()
boring_function <- function(x) {
x= x
x}
submit()
boring_function <- function(x) {
x
}
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
submit()
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
submit()
submit()
submit()
evaluate(c(1.4,3.6,7.9,8.8))
evaluate()
evaluate(func(c(1.4,3.6,7.9,8.8)))
evaluate(sd(c(1.4,3.6,7.9,8.8)))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
submit()
submit()
submit()
telegram("casa","rojo")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
mad_libs("parque","bonito","jugar")
submit()
submit()
"I" %p% "love" %p% "R!"
set.seed(20)
x <- rnorm(100,0,1)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x+e
plot(x,y)
set.seed(20)
x <- rnorm(100,0,1)
e <- rnorm(100,0,50)
y <- 0.5 + 2*x+e
plot(x,y)
set.seed(20)
x <- rnorm(100,0,1)
e <- rnorm(100,0,.5)
y <- 0.5 + 2*x+e
plot(x,y)
set.seed(10)
x <- rbinom(100,1,0.5)
?plot
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
summary(y)
plot(x,y, main="Modelo Lineal", col="dark red")
e <- rnorm(100,0,2)
y <- 0.5 + 6*x + e
summary(y)
plot(x,y, main="Modelo Lineal", col="dark red")
e <- rnorm(100,0,1)
y <- 0.5 + 6*x + e
summary(y)
plot(x,y, main="Modelo Lineal", col="dark red")
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3*x
y <- rpois(100,exp(log.mu)) #Llamar poisson
summary(y)
plot(x,y,main="Modelo Poisson",col="forestgreen")
library(swirl)
swirl()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply((flags$population, flags$red,summary)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plats)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10,replace = FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,replace = TRUE)
flips <- sample(c(0,1),100,replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size = 100,prob = 0.7)
rbinom(1,size = 100,prob = 0.7)
rbinom(100,size = 1,prob = 0.7)
flips2 <- rbinom(n = 100,size = 1,prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
rpois(5,10)
my_pois <- replicate(100, rpois(5,10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
?strptime
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() <
t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(),t1,units = "days")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(speed,dist)
x <- speed
plot(cars$speed,cars$dist)
plot(cars$dist,cars$speed)
plot(cars$speed,cars$dist)
plot(x = cars$speed,y=cars$dist,xlab = "Speed")
plot(x = cars$speed,y=cars$dist,xlab = "Speed",ylab = "Stopping Distance")
plot(x = cars$speed,y=cars$dist ,ylab = "Stopping Distance")
plot("Speed","Stopping Distance")
plot(x = cars$speed,y=cars$dist ,ylab = "Stopping Distance")
plot(x = cars$speed,y=cars$dist, xlab = "Speed" ,ylab = "Stopping Distance")
plot(x = cars$speed,y=cars$dist, xlab = "Speed" ,ylab = "Stopping Distance",main = "My plot")
plot(cars, main = "My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
mtcars
data("mtcars")
data(mtcars)
boxplot(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl,data = mtcars)
hist(mtcars$mpg)
swirl()
set.seed(1)
sample(1:10,4)
sample(1:10,4)
sample(LETTERS,5)
sample(1:10)
sample(1:10)
sample(1:10,replace = TRUE)
system.time(readLines("http://fcfm.buap.mx"))
system.time(readLines("http://www.fcfm.buap.mx"))
hilbert <- function(n){
i <- 1:n
1/outer(i-1,i,"+")
}
hilbert(1000)
?svd
x <- hilbert(1000)
system.time(svd(x))
system.time(x <- hilbert(1000))
system.time(svd(x))
x <- matrix(1:6,2,3)
for(i in seq_len(nrow(x))){}
for(i in seq_len(nrow(x))){for(j in seq_len(ncol(x))){print(x[i,j])}}
x
arriba=0
abajo=0
for (i in 1:100){
z<-5
while(z>=3 && z<=10){
print(z)
y<-c(y,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<- z+0.5
} else {
z<- z-0.5
}
}
y
if (z=10) {arriba<-c(arriba+1)}
else {abajo<-c(abajo+1)}
}
arriba
abajo
arriba=0
abajo=0
for (i in 1:100){
z<-5
while(z>=3 && z<=10){
print(z)
y<-c(y,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<- z+0.5
} else {
z<- z-0.5
}
}
y
if (z=10) {arriba<-c(arriba+1)}
else {abajo<-c(abajo+1)}
}
arriba
abajo
z<-5
while(z>=3 && z<=10){
print(z)
y<-c(y,z)
moneda<-rbinom(1,1,0.5)
if(moneda==1){#caminata aleatoria
z<- z+0.5
} else {
z<- z-0.5
}
}
y
lm #Esta guardada en stats
lm <- function(x) {x*x}
lm
rm(lm) #borra la funci??n
lm  #te ense??a la original
x <- list(2,"a","b",TRUE)
x[[2]]
x <- 1:4
y <- 2
x + y
airquality
complete.cases(airquality$Ozone)
sum(complete.cases(airquality$Ozone))
153-116
n <- complete.cases(airquality$Ozone)
sapply(n,mean)
summary(airquality)
x <- airquality^
x <- airquality[airquality>31]
x <- airquality[airquality$Ozone > 31]
x <- airquality$31
x <- airquality$Ozone
t <- airquality$Temp
s <- x[x>31]
d <- t[t>90]
mean(s,d)
mean(s)
z <- airquality$Solar.R
c <- z[z>31]
mean(c,na.rm = TRUE)
s <- [z>90]
s <- z[z>90]
mean(s,na.rm = TRUE)
x <- c + s
a <- mean(s,na.rm = TRUE)
b <- mean(c,na.rm = TRUE)
q <- a + b
mean(q)
z <- airquality$Ozone
z[z>31]
a <- airquality$Month
a
z <- a[a==6]
n <- a$Temp
split(x,airquality$Month)
x <- airquality$Temp
a <- split(x,airquality$Month)
a
summary(a)
mean(a)
x <- c(78, 74, 67, 84, 85, 79, 82, 87, 90, 87, 93, 92, 82, 80, 79, 77, 72, 65, 73, 76, 77, 76, 76, 76, 75, 78, 73, 80, 77, 83)
mean(x)
x <- airquality$Ozone
a <- split(x,airquality$Month)
a
x <- c(190,118,307,92,252,223,279,291,323,259,250,284,269,248,236,175,314,267,276,272,175,291,260,274,285,187,220,294,223,82,213,237,188,167,215,190,212,238,244,51,51,203,157,225,275,253,254,83,255,157,192,222,229,207,197,183,189,237,95,92,236,139)
mean(x)
mean(x)
x <- c(190,118,307,92,252,223,279,291,259,250,284,269,248,236,175,314,267,276,272,175,291,260,274,285,187,220,294,223,82,213,237,188,167,215,190,212,238,244,51,51,203,157,225,275,253,254,83,255,157,192,222,229,207,197,183,189,237,95,92,236,139)
mean(x)
mejor <- function(estado,resultado){
setwd("~/Documents/Programacion_Actuarial_III_OT16/Calidad de Hospitales - data")
#Lectura de datos
Tasa <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
Tasa[,2] <- as.character(Tasa[, 2])
# Revisi??n de la validez de estado y resultado
St <- factor(Tasa[, 7])
r <- factor(c("ataque","falla","neumonia"))
if(estado %in% St == FALSE)
{ stop("Estado invalido")}
e = F
if (resultado == "ataque"){
e = T
co <- 11
}
else if ( resultado =="falla" ){
e = T
co <-17
}
else if (resultado =="neumonia"){
e = T
co <- 23
}
else
{ stop("resultado invalido")}
#
St <- Tasa[Tasa$State == estado, ]
s <- St[, c(2,co)]
nu1 <- as.numeric(s[,2])
or <- order(nu1,na.last = NA,decreasing = FALSE)
s1 <- s[or, ]
a <-s1[,2]==s1[1,2]
s2 <-s1[a,]
s3 <- s2[order(s2[,1]),]
m <- s3[1,1]
m
}
mejor("MD","falla")
rankingcompleto <- function(resultado, num = "mejor") {
setwd("~/Documents/Programacion_Actuarial_III_OT16/Calidad de Hospitales - data")
#Lectura de datos
Tasa <- read.csv("outcome-of-care-measures.csv")
r <- c("ataque", "falla", "neumonia")
if (resultado == "ataque"){
col <- 11}
else if (resultado == "falla"){
col <- 17}
else if (resultado == "neumonia"){
col <- 23}
else if (resultado %in% r == F){
stop("resultado inválido")
}
Tasa[, col] <- suppressWarnings(as.numeric(levels(Tasa[, col])[Tasa[, col]]))
Tasa[, 2] <- as.character(Tasa[, 2])
vec1 <- vector()
St <- levels(Tasa[, 7])
for(i in 1:length(St)) {
estado <- Tasa[grep(St[i], Tasa[,7]), ]
or <- estado[order(estado[, col], estado[, 2], na.last = NA), ]
if(num == "mejor") {
nombre <- or[1, 2]}
else if(num == "peor") {
nombre <- or[nrow(or), 2]}
else { nombre <- or[num, 2]}
vec1 <- append(vec1, c(nombre, St[i]))
}
vec1 <- as.data.frame(matrix(vec1, length(St), 2, byrow = TRUE))
colnames(vec1) <- c("Hospital", "State")
rownames(vec1) <- St
vec1
}
rankhospital <- function(estado,resultado,num="mejor"){
setwd("~/Documents/Programacion_Actuarial_III_OT16/Calidad de Hospitales - data")
#Lectura de datos
Tasa <- read.csv("outcome-of-care-measures.csv",colClasses = "character")
Tasa[,2] <- as.character(Tasa[, 2])
# Revisión de la validez de estado y resultado
St <- factor(Tasa[, 7])
r <- factor(c("ataque","falla","neumonia","mejor","peor"))
if(estado %in% St == FALSE)
{ stop("Estado invalido")}
e = FALSE
if (resultado == "ataque"){
e = TRUE
co <- 11
}
else if ( resultado =="falla" ){
e = TRUE
co <-17
}
else if (resultado =="neumonia"){
e = TRUE
co <- 23
}
else
{ stop("resultado invalido")}
St <- Tasa[Tasa$State == estado, ]
Rate <- co
s <- St[, c(2,Rate)]
nu1 <- as.numeric(s[,2])
or <- order(nu1,na.last = NA,decreasing = FALSE)
s1 <- s[or, ]
n <- nrow(s1)
if(num == "mejor") {
num <- 1}
if(num == "peor"){
num <- n}
if(num > n) {stop("NA")}
tabla <- data.frame(s1,rank=1:n)
Q <- s1[,2] == s1[num,2]
s2 <- s1[Q,]
mejor1 <- s2[order(s2[,1]),]
mejor1[1,1]
}
rankhospital("FL","neumonia",45)
rankingcompleto("neumonia",60)[5:10,]
